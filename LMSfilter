/**
 * 自适应滤波器
 * 输入参数：xn，输入的信号序列；dn，所期望的信号序列；M，滤波器的阶数，mu，收敛因子
 * 输出参数：yn，实际的输出序列
 * @author leodon;
 */
public class LMSfilter {
    public  double[] LMS(double[] xn, double[] dn,int M,double mu){
        int itr=xn.length;
        double[] en = new double[itr];
        double[][] w=new double[itr][M];
        double[] x=new double[M];
        //迭代计算
        for(int k=M;k<itr;k++){
            //xn=xn(k:-1:k-m+1)
            System.arraycopy(xn,k-M,x,0,M);
            Reserve(x);
            //y=W的k-1行点乘x，返回一个数
            double sum=0;
            for(int i=0;i<M;i++){
                sum+=w[k-1][i]*x[i];
            }
            en[k]=dn[k]-sum;
            for(int i=0;i<M;i++){
                w[k][i] = w[k-1][i] + 2 * mu * en[k] * x[i];
            }
        }
        //求最优时滤波器的输出序列
        double[] yn=new double[xn.length];
        for(int k=M;k<itr;k++) {
            double sum_yn=0;
            System.arraycopy(xn,k-M,x,0,M);
            Reserve(x);
            for(int i=0;i<M;i++){
                sum_yn+=w[itr-1][i]*x[i];
            }
            yn[k]=sum_yn;
        }
        return yn;
    }
    public static double[] Reserve (double[] array){
        double[] newArray=new double[array.length];
        for(int i=0;i<array.length;i++){
            newArray[i]=array[array.length-i-1];
        }
        return  newArray;
    }
}
